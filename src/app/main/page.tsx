"use client";
import { Suspense, useEffect, useState } from "react";
import dynamic from 'next/dynamic';
import { Alert } from "antd";
import { motion } from "framer-motion";
import { SyncLoader } from "react-spinners";
import { listen } from "@tauri-apps/api/event";
import { Snackbar } from "@mui/material";
import MuiAlert from "@mui/material/Alert";

const Header = dynamic(() => import("./components/header"), { ssr: false });
const Body = dynamic(() => import("./components/body"), { ssr: false });
const Footer = dynamic(() => import("./components/footer"), { ssr: false });

// Create a separate component for client-side logic
function MainContent() {
  const [publicKey, setPublicKey] = useState("");
  const [relay, setRelay] = useState("");
  const [privateKey, setPrivateKey] = useState(""); 
  const [turn, setTurn] = useState("");
  const [leader, setLeader] = useState("");
  const [error, setError] = useState("");
  const [peerId, setPeerId] = useState("");
  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");

  useEffect(() => {
    // Move URL parameter logic to useEffect
    const searchParams = new URLSearchParams(window.location.search);
    const publicK = searchParams.get("public");
    const relayId = searchParams.get("relay");
    const privateK = searchParams.get("private");
    const turnParam = searchParams.get("turn");
    const peerId = searchParams.get("peerId");

    setPublicKey((publicK ?? "").toString());
    setRelay((relayId ?? "").toString());
    setPrivateKey(privateK ?? "");
    setTurn(turnParam ?? "");
    setPeerId(peerId ?? "");
    // Listen for error events
    const unlisten = listen<string>("error", (event) => {
      setError(event.payload);
    });

    const unlisten2 = listen<string>("genBlock", () => {
      setSnackbarMessage("New Block Generated By You");
      setOpenSnackbar(true);
    });

    return () => {
      unlisten.then(f => f());
      unlisten2.then(f => f());
    };
  }, []);

  const handleCloseSnackbar = (event?: React.SyntheticEvent | Event, reason?: string) => {
    if (reason === 'clickaway') {
      return;
    }
    setOpenSnackbar(false);
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="flex flex-col h-full"
    >
      <Header publicKey={publicKey} relay={relay} peerId={peerId} />
      {/* <Divider className="bg-slate-700" /> */}
      <div className="flex-grow overflow-hidden pt-9">
        {error ? (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
            className="m-4"
          >
            <Alert
              message="Error"
              description={error}
              type="error"
              showIcon
              className="bg-red-900 border-red-700 text-white"
            />
          </motion.div>
        ) : (
          <Body
            publicKey={publicKey}
            privateKey={privateKey}
            turn={turn}
            setTurn={setTurn}
          />
        )}
      </div>
      <div>
        <Footer turn={turn} leader={leader} setLeader={setLeader} />
      </div>
      <Snackbar 
        open={openSnackbar} 
        autoHideDuration={3000} 
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <MuiAlert onClose={handleCloseSnackbar} severity="success" sx={{ width: '100%' }}>
          {snackbarMessage}
        </MuiAlert>
      </Snackbar>
    </motion.div>
  );
}

export default function Main() {
  return (
    <div
      className="w-full h-screen select-none bg-gradient-to-br from-gray-900 to-gray-800 text-white p-6 flex flex-col overflow-hidden"
      onContextMenu={(event) => event.preventDefault()}
    >
      <Suspense fallback={
        <div className="flex flex-col items-center justify-center w-full h-full">
          <SyncLoader color="#10B981" size={8} />
        </div>
      }>
        <MainContent />
      </Suspense>
    </div>
  );
}
